# smittytone's zsh profile (Mac)
#
# Version 1.6.0

# Options
setopt AUTO_CD
setopt CORRECT
unsetopt NOMATCH


# History
HISTFILE=~/.zsh_history
HISTSIZE=100
SAVEHIST=100


# Autocompletion...
autoload -Uz compinit
compinit


# ...add case-insensitive path-completion for macOS
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'

# Prompts...
# ...left-hand side
PROMPT='%F{13}%d >%f '

# ...right-hand side: use for Git repos
# FROM 1.0.5 - use a git check to show status as well as repo namw
git_prompt() {
    is_dirty() {
        test -n "$(git status --porcelain --ignore-submodules)"
    }
    vcs_info
    local ref="$vcs_info_msg_0_"
    if [[ -n "$ref" ]]; then
        local colour="%F{green}"
        # FROM 1.5.2 -- Colour for repos with unmerged commits or uncommitted files
        local unmerged=$(git status)
        unmerged=$(grep 'is ahead' < <((echo -e "$unmerged")))
        if [[ -n "$unmerged" ]]; then
            colour="%F{yellow}"
        fi
        if is_dirty; then
            colour="%F{red}"
        fi
        RPROMPT="%F{cyan}[ ${colour}${ref}%F{cyan} ]%f"
    else
        RPROMPT=''
    fi
}

setopt prompt_subst
autoload -Uz add-zsh-hook
autoload -Uz vcs_info
add-zsh-hook precmd git_prompt
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes false
zstyle ':vcs_info:*' formats %b

# ...input prompt
PS2="%_... "

# Aliases...
# ...list operations
alias ls='gls -lhF --group-directories-first --color'
alias la='gls -lahF --group-directories-first --color'
alias lx='/bin/ls -la@'

# ...tools
alias python='python3'
alias log='screen /dev/tty.usbserial-FTWHFLU9D 115200'

# List operation colour scheme
export LS_COLORS="$LS_COLORS:di=1;36:ln=0;93:ex=1;35"


# Path variables...
# ...Git repos
export GIT="$HOME/GitHub"
export SCRIPTS="$GIT/scripts"
export PATH="$HOME/bin:$SCRIPTS:$PATH"

# ...Rust
export PATH="$HOME/.cargo/bin:$PATH"

# Set Raspberry Pi Pico SDK path
export PICO_SDK_PATH="$GIT/pico-sdk"


# FROM 1.6.0
# Handle platfoms
CPU=$(uname -p)
if [[ "$CPU" == "arm" ]]; then
    export PATH="/opt/homebrew/bin:$PATH"
    export EDITOR=/opt/homebrew/bin/nano
    alias nano=/opt/homebrew/bin/nano
    alias oldbrew=/usr/local/bin/brew

else
    export PATH="/usr/local/bin:$PATH"
    export EDITOR=/usr/local/bin/nano
    alias nano=/usr/local/bin/nano
fi


# FROM 1.0.5
# Functions...
# ...single command Git push
# FROM 1.3.2 -- support empty messages
gitsync() {
    if [[ -z "$1" ]]; then
        msg="Latest upload @ $(date)"
    else
        msg="$1"
    fi
    git add .
    git commit -m "$msg"
    git push
}

# FROM 1.2.0
# Convenience functions for generating certain (.md, .zsh) file types
mdfile() {
    [[ ! -e untitled.md ]] && touch untitled.md
}

zfile() {
    [[ ! -e untitled.zsh ]] && echo "#!/bin/zsh\n\n#\n# Version x.y.x\n" > untitled.zsh
}

# FROM 1.4.0
dlist() {
    local list=$(/bin/ls /dev/cu.*)
    # Replace the following line with your own 'to be ignored' items
    local ignores=(Bluetooth TSAirPods TSSoloPro debug)
    while IFS= read -r device; do
        local do_show=1
        for ignorable in "${ignores[@]}"; do
            local ignore=$(grep "$ignorable" < <(echo -e "$device"))
            if [[ -n "$ignore" ]]; then
                do_show=0
                break
            fi
        done
        if [[ $do_show -eq 1 ]]; then
            echo $device
        fi
    done <<< "$list"
}

# FT232H support...
# ...report if device is connected and export required variables
if [ -e /dev/cu.usbserial-* ]; then
    export BLINKA_FT232H=1
    echo "FT232H connected"
fi


# MCP2221 support...
# ...report if device is connected and export required variables
if [ -e /dev/cu.usbmodem* ]; then
    export BLINKA_MCP2221=1
    echo "MCP2221 connected"
fi


# Display which shell is use
echo "Running Shell from $SHELL"

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/bin/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/bin/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/bin/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/bin/google-cloud-sdk/completion.zsh.inc"; fi
